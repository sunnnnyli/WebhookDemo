@isTest
private class GitHubWebhookHandlerTest {

    @isTest
    static void testHandleNotification_WithIssueId() {
        // Set up the test RestRequest
        RestRequest req = new RestRequest();
        req.requestUri = '/services/apexrest/api/github/pullrequests';
        req.httpMethod = 'POST';

        // Sample payload with pull_request body containing issueId
        String payload = '{' +
            '"action": "opened",' +
            '"pull_request": {' +
                '"body": "This pull request addresses the issue SFT-123.",' +
                '"html_url": "https://github.com/user/repo/pull/45"' +
            '}' +
        '}';

        req.addHeader('Content-Type', 'application/json');
        req.requestBody = Blob.valueOf(payload);

        // Set the RestRequest and RestResponse in RestContext
        RestContext.request = req;
        RestContext.response = new RestResponse();

        // Call the method
        Test.startTest();
        GitHubWebhookHandler.handleNotification();
        Test.stopTest();

        // Since there's no direct output, we ensure that no exceptions are thrown
    }

    @isTest
    static void testHandleNotification_WithoutIssueId() {
        // Set up the test RestRequest
        RestRequest req = new RestRequest();
        req.requestUri = '/services/apexrest/api/github/pullrequests';
        req.httpMethod = 'POST';

        // Sample payload with pull_request body NOT containing issueId
        String payload = '{' +
            '"action": "opened",' +
            '"pull_request": {' +
                '"body": "This pull request does not reference any issue.",' +
                '"html_url": "https://github.com/user/repo/pull/46"' +
            '}' +
        '}';

        req.addHeader('Content-Type', 'application/json');
        req.requestBody = Blob.valueOf(payload);

        // Set the RestRequest and RestResponse in RestContext
        RestContext.request = req;
        RestContext.response = new RestResponse();

        // Call the method
        Test.startTest();
        GitHubWebhookHandler.handleNotification();
        Test.stopTest();

        // Ensure that the method handles the absence of issueId gracefully
    }

    @isTest
    static void testHandleNotification_PullRequestNull() {
        // Set up the test RestRequest
        RestRequest req = new RestRequest();
        req.requestUri = '/services/apexrest/api/github/pullrequests';
        req.httpMethod = 'POST';

        // Sample payload without pull_request
        String payload = '{' +
            '"action": "opened"' +
            // No pull_request field included
        '}';

        req.addHeader('Content-Type', 'application/json');
        req.requestBody = Blob.valueOf(payload);

        // Set the RestRequest and RestResponse in RestContext
        RestContext.request = req;
        RestContext.response = new RestResponse();

        // Call the method
        Test.startTest();
        GitHubWebhookHandler.handleNotification();
        Test.stopTest();

        // Ensure that the method handles a null pull_request object without errors
    }

    @isTest
    static void testExtractIssueId() {
        // Test case with issue ID present
        String prBodyWithIssueId = 'This pull request addresses the issue SFT-123.';
        String issueId = GitHubWebhookHandler.extractIssueId(prBodyWithIssueId);
        System.assertEquals('SFT-123', issueId, 'The Issue ID should be extracted correctly when present.');

        // Test case without issue ID
        String prBodyWithoutIssueId = 'This pull request does not reference any issue.';
        issueId = GitHubWebhookHandler.extractIssueId(prBodyWithoutIssueId);
        System.assertEquals(null, issueId, 'The Issue ID should be null when not present.');
    }
}
